// <auto-generated>
//  automatically generated by xlsx-fbs, do not modify it. Modify xlsx-fbs/template/unity/*.cs instead.
// </auto-generated>

using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using Google.FlatBuffers;
using UnityEngine;
using YooAsset;

namespace {{{ NAMESPACE }}}
{
    public abstract class TableLoader<TTable, TData>
    {
        private Dictionary<int, TData> _dict;
        private TData[] _items;
        private bool _loaded;
        private UniTask<bool>? _loadingTask; // Prevents duplicate loading caused by simultaneous calls to Load

        public bool IsLoaded => _loaded;

        /// <summary>
        /// YooAsset => AddressByFileName
        /// </summary>
        protected abstract string AssetPath { get; }
        protected abstract TTable GetTableRoot(ByteBuffer buffer);
        protected abstract int GetDataLength(TTable root);
        protected abstract TData GetData(TTable root, int index);
        protected abstract int GetDataId(TData data);

        /// <summary>
        /// Initialize and load table data
        /// </summary>
        /// <returns></returns>
        public UniTask<bool> LoadAsync()
        {
            if (_loaded) return UniTask.FromResult(true);

            if (_loadingTask.HasValue) return _loadingTask.Value;

            _loadingTask = InternalLoadAsync();
            return _loadingTask.Value;
        }

        private async UniTask<bool> InternalLoadAsync()
        {
            var package = YooAssets.TryGetPackage("TablePackage");
            if (package == null)
            {
                Debug.LogError("[TableLoader] Please init YooAsset 'TablePackage' first");
                _loadingTask = null;
                return false;
            }
            
            var handle = package.LoadAssetAsync<TextAsset>(AssetPath);
            await handle.ToUniTask();

            if (handle.Status != EOperationStatus.Succeed)
            {
                Debug.LogError($"[TableLoader] Failed to load '{AssetPath}'");
                _loadingTask = null;
                return false;
            }

            var textAsset = handle.AssetObject as TextAsset;
            var buffer = new ByteBuffer(textAsset.bytes);
            var root = GetTableRoot(buffer);
            LoadDataFromTableRoot(root);

            handle.Release();
            _loadingTask = null;
            return true;
        }

        /// <summary>
        /// Initialize data using the Root object from FlatBuffers
        /// </summary>
        /// <param name="root">Root object</param>
        public void LoadDataFromTableRoot(TTable root)
        {
            if (_loaded) return;

            int length = GetDataLength(root);
            _dict = new Dictionary<int, TData>(length);
            _items = new TData[length];

            for (int i = 0; i < length; i++)
            {
                var item = GetData(root, i);
                _items[i] = item;
                _dict[GetDataId(item)] = item;
            }

            _loaded = true;
            _loadingTask = null;
        }

        /// <summary>
        /// Get a single row of data
        /// </summary>
        /// <param name="id">Id of the data to retrieve</param>
        /// <returns></returns>
        public TData Get(int id)
        {
            if (!_loaded)
            {
                Debug.LogError($"[TableLoader] '{AssetPath}' not loaded");
                return default;
            }

            if (_dict.TryGetValue(id, out var item))
                return item;
            
            Debug.LogWarning($"[TableLoader] No data found in '{AssetPath}' for id: {id}");

            return default;
        }

        /// <summary>
        /// Get all data values
        /// </summary>
        /// <returns></returns>
        public TData[] GetAll()
        {
            if (!_loaded)
            {
                Debug.LogError($"[TableLoader] '{AssetPath}' not loaded");
                return System.Array.Empty<TData>();
            }

            return _items;
        }

        /// <summary>
        /// Unload table resources
        /// </summary>
        public void Unload()
        {
            _dict?.Clear();
            _dict = null;
            _items = null;
            _loaded = false;
            _loadingTask = null;
        }
    }
}
