// <auto-generated>
//  automatically generated by xlsx-fbs, do not modify it. Modify xlsx-fbs/template/unity/*.cs instead.
// </auto-generated>

using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using Google.FlatBuffers;
using UnityEngine;
using YooAsset;

namespace {{{ NAMESPACE }}}
{
    public abstract class TableLoader<TTable, TData>
    {
        private Dictionary<uint, TData> _dict;
        private TData[] _items;
        private bool _loaded;
        private UniTask<bool>? _loadingTask; // 防止同时调用 Load 导致的重复加载

        public bool IsLoaded => _loaded;

        protected abstract string AssetPath { get; }
        protected abstract TTable GetTableRoot(ByteBuffer buffer);
        protected abstract int GetDataLength(TTable root);
        protected abstract TData GetData(TTable root, int index);
        protected abstract uint GetDataId(TData data);

        /// <summary>
        /// 初始化加载表数据
        /// </summary>
        /// <returns></returns>
        public UniTask<bool> Load()
        {
            if (_loaded) return UniTask.FromResult(true);

            if (_loadingTask.HasValue) return _loadingTask.Value;

            _loadingTask = InternalLoad();
            return _loadingTask.Value;
        }

        private async UniTask<bool> InternalLoad()
        {
            var handle = YooAssets.LoadAssetAsync<TextAsset>(AssetPath);
            await handle.ToUniTask();

            if (handle.Status != EOperationStatus.Succeed)
            {
                Debug.LogError($"[TableLoader] Failed to load: {AssetPath}");
                _loadingTask = null;
                return false;
            }

            var textAsset = handle.AssetObject as TextAsset;
            var buffer = new ByteBuffer(textAsset.bytes);
            var root = GetTableRoot(buffer);
            LoadDataFromTableRoot(root);

            _loadingTask = null;
            return true;
        }

        /// <summary>
        /// 通过 FlatBuffers 的 Root 来进行初始化数据
        /// </summary>
        /// <param name="root"></param>
        public void LoadDataFromTableRoot(TTable root)
        {
            if (_loaded) return;

            int length = GetDataLength(root);
            _dict = new Dictionary<uint, TData>(length);
            _items = new TData[length];

            for (int i = 0; i < length; i++)
            {
                var item = GetData(root, i);
                _items[i] = item;
                _dict[GetDataId(item)] = item;
            }

            _loaded = true;
            _loadingTask = null;
        }

        /// <summary>
        /// 获取单行数据
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public TData Get(uint id)
        {
            if (!_loaded)
                Debug.LogError($"[TableLoader] {AssetPath} not loaded.");

            return _dict.TryGetValue(id, out var item) ? item : default;
        }

        /// <summary>
        /// 获取所有数据
        /// </summary>
        /// <returns></returns>
        public TData[] GetAll()
        {
            if (!_loaded)
                Debug.LogError($"[TableLoader] {AssetPath} not loaded.");

            return _items;
        }

        /// <summary>
        /// 卸载表资源
        /// </summary>
        public void Unload()
        {
            _dict?.Clear();
            _dict = null;
            _items = null;
            _loaded = false;
            _loadingTask = null;
        }
    }
}
