// <auto-generated>
//  automatically generated by xlsx-fbs, do not modify it. Modify xlsx-fbs/template/unity/*.cs instead.
// </auto-generated>

#if STRICT_VERIFICATION
using System;
#endif
using Cysharp.Threading.Tasks;
using Google.FlatBuffers;
using UnityEngine;
using YooAsset;

namespace {{{ NAMESPACE }}}
{
    public static class MergeTableLoader
    {
        private const string AssetPath = "mergeTable";
        private static bool _loaded = false;

        /// <summary>
        /// Load all sub-tables in the merge table
        /// </summary>
        /// <returns></returns>
        public static async UniTask<bool> LoadAllAsync()
        {
            if (_loaded) return true;

            var package = YooAssets.TryGetPackage("TablePackage");
            if (package == null)
            {
                Debug.LogError("[TableLoader] Please init YooAsset 'TablePackage' first");
                return false;
            }

            var handle = package.LoadAssetAsync<TextAsset>(AssetPath);
            await handle.ToUniTask();

            if (handle.Status != EOperationStatus.Succeed)
            {
                Debug.LogError($"[TableLoader] Failed to load '{AssetPath}'");
                return false;
            }

            var textAsset = handle.AssetObject as TextAsset;
            var buffer = new ByteBuffer(textAsset.bytes);

            if (!MergeTable.MergeTableBufferHasIdentifier(buffer))
            {
                var msg = $"[TableLoader] FlatBuffers mismatched identifier for '{AssetPath}'";
#if STRICT_VERIFICATION
                throw new Exception(msg);
#else
                Debug.LogError(msg);
                return false;
#endif
            }

            if (!MergeTable.VerifyMergeTable(buffer))
            {
                var msg = $"[TableLoader] FlatBuffers verification failed for '{AssetPath}'";
#if STRICT_VERIFICATION
                throw new Exception(msg);
#else
                Debug.LogError(msg);
                return false;
#endif
            }

            var root = MergeTable.GetRootAsMergeTable(buffer);

            // Load all sub-tables
{{{ LOAD_TABLE_LIST }}}

            handle.Release();
            _loaded = true;
            return true;
        }

        /// <summary>
        /// Unload all sub-tables in the merge table
        /// </summary>
        public static void UnloadAll()
        {
            _loaded = false;
{{{ UNLOAD_TABLE_LIST }}}
        }
    }
}
